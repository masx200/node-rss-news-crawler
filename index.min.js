"use strict";
async function sleeptiemout(e) {
  return await new Promise(t => {
    setTimeout(() => {
      t();
    }, e);
  });
}
async function 获取rss订阅内容(e, t, r) {
  return await new Promise(async (a, i) => {
    console.log("爬虫测试开始", e),
      fetch.fetchUrl(e, urloptions, async (o, n, s) => {
        if (o) return void i(new Error(o));
        if (void 0 !== n.status && 200 !== n.status)
          return void i(
            new Error("爬虫下载失败,重新下载-" + e + "错误码" + n.status)
          );
        const l = s.toString(),
          c = fastxmlparser.parse(l),
          p = c.rss.channel.title,
          w = path.join(
            __dirname,
            "download",
            (p + "-" + e + "-" + filecreatetime + ".json")
              .replace(/\"/g, "_")
              .replace(/\|/g, "_")
              .replace(/:/g, "_")
              .replace(/\\/g, "_")
              .replace(/\//g, "_")
              .replace(/\ /g, "_")
          );
        fs.writeFile(w, JSON.stringify(c), e => {
          e && i(new Error(e));
        });
        const m = c.rss.channel.item.map(e => ({
          title: e.title,
          link: e.link
        }));
        var d = await Promise.all(m.map(e => 爬虫下载解析(e.link, t, r, p)));
        a(["爬虫完成! ", e, d]);
      });
  });
}
async function 若失败反复尝试下载(e) {
  var t = e;
  return await new Promise(async r => {
    console.log("爬虫开始下载", t),
      fetch.fetchUrl(t, urloptions, async (a, i, o) => {
        try {
          if (a) throw new Error(a);
          if (void 0 !== i.status && 200 !== i.status)
            throw new Error("爬虫下载失败 错误码 " + i.status);
          return void r(o);
        } catch (a) {
          console.error("爬虫下载失败", t, a),
            await sleeptiemout(500 + 500 * Math.random()),
            r(await 若失败反复尝试下载(e));
        }
      });
  });
}
async function 爬虫下载解析(e, t, r, a) {
  return (
    await sleeptiemout(100 * Math.random()),
    await new Promise(async (i, o) => {
      const n = t;
      var s = await new Promise(async (t, r) => {
        t(await 若失败反复尝试下载(e));
      });
      const l = cheerio.load(s.toString()),
        c = Array.from(l(n + " img")).map(e => e.attribs[r] || e.attribs.src),
        p = l("title").text(),
        w = l(t).text(),
        m = { title: p, link: e, contenttext: w },
        d = path.join(
          __dirname,
          "download",
          (a + "-" + p + "-" + filecreatetime + ".json")
            .replace(/\"/g, "_")
            .replace(/\ /g, "_")
            .replace(/:/g, "_")
            .replace(/\\/g, "_")
            .replace(/\//g, "_")
            .replace(/\|/g, "_")
        ),
        g = { title: m.title, link: m.link, imgs: c, text: m.contenttext };
      fs.existsSync(path.join(__dirname, "download")) ||
        (console.log(
          "所需的目录不存在,创建目录",
          path.join(__dirname, "download")
        ),
        fs.mkdirSync(path.join(__dirname, "download"))),
        console.log("写入到文件", d, g);
      try {
        await fsPromises.writeFile(d, JSON.stringify(g)),
          i(["文件写入成功!", e, d]);
      } catch (e) {
        o(new Error(e));
      }
    })
  );
}
process.on("unhandledRejection", e => {
  throw e;
});
const filecreatetime = new Date().toString(),
  fastxmlparser = require("fast-xml-parser"),
  cheerio = require("cheerio"),
  fetch = require("fetch"),
  fs = require("fs"),
  fsPromises = fs.promises,
  path = require("path"),
  navigatoruserAgent =
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36",
  urloptions = { headers: { "User-Agent": navigatoruserAgent } },
  pachongurlselecarray = [
    {
      url: "https://www.ifanr.com/feed",
      selector:
        "article.o-single-content__body__content.c-article-content.s-single-article.js-article",
      imglazyattr: "src"
    },
    {
      url: "https://www.pingwest.com/feed",
      selector: "article.article-style",
      imglazyattr: "src"
    },
    {
      url: "https://www.landiannews.com/feed",
      selector: "#scroll > section > article > div.content_post",
      imglazyattr: "src"
    },
    {
      url: "https://www.tmtpost.com/rss",
      selector: "body > div.container > section > div > article",
      imglazyattr: "src"
    },
    {
      url: "https://www.ithome.com/rss/",
      selector: "div#paragraph.post_content",
      imglazyattr: "data-original"
    }
  ];
(async () => {
  const e = await fsPromises.readdir(path.join(__dirname, "download"));
  var t = await Promise.all([
    Promise.all(
      pachongurlselecarray.map(e =>
        获取rss订阅内容(e.url, e.selector, e.imglazyattr)
      )
    ),
    Promise.all(
      e.map(e => fsPromises.unlink(path.join(__dirname, "download", e)))
    )
  ]);
  console.log("爬虫全部完成!\n"), console.log(JSON.stringify(t[0]));
  const r = path.join(
    __dirname,
    "download",
    `download ${new Date()}.log.json`
      .replace(/\"/g, "_")
      .replace(/\|/g, "_")
      .replace(/:/g, "_")
      .replace(/\\/g, "_")
      .replace(/\//g, "_")
      .replace(/\ /g, "_")
  );
  try {
    await fsPromises.writeFile(r, JSON.stringify(t[0]));
  } catch (e) {
    console.error(e);
  }
})();
